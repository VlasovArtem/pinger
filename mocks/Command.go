// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	bot "github.com/VlasovArtem/pinger/src/pinger/bot"
	mock "github.com/stretchr/testify/mock"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Command is an autogenerated mock type for the Command type
type Command struct {
	mock.Mock
}

// CheckCondition provides a mock function with given fields: botPingers, botPinger, message
func (_m *Command) CheckCondition(botPingers *bot.BotPingers, botPinger *bot.BotPinger, message *tgbotapi.Message) error {
	ret := _m.Called(botPingers, botPinger, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*bot.BotPingers, *bot.BotPinger, *tgbotapi.Message) error); ok {
		r0 = rf(botPingers, botPinger, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDescription provides a mock function with given fields:
func (_m *Command) GetDescription() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetShortName provides a mock function with given fields:
func (_m *Command) GetShortName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnContinue provides a mock function with given fields: botPingers, botPinger, message
func (_m *Command) OnContinue(botPingers *bot.BotPingers, botPinger *bot.BotPinger, message *tgbotapi.Message) {
	_m.Called(botPingers, botPinger, message)
}

// OnStart provides a mock function with given fields: botPingers, botPinger, message
func (_m *Command) OnStart(botPingers *bot.BotPingers, botPinger *bot.BotPinger, message *tgbotapi.Message) {
	_m.Called(botPingers, botPinger, message)
}

type mockConstructorTestingTNewCommand interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommand creates a new instance of Command. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommand(t mockConstructorTestingTNewCommand) *Command {
	mock := &Command{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
